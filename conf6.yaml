%YAML 1.2
---
name: '32x4'                       # ideally no spaces128x10
gpu: 0                                 # gpu id to process on

dataset: 
  num_chunks: 125716                   # newest nof chunks to parse
  allow_less_chunks: true
  train_ratio: 0.99                    # trainingset ratio
  # For separated test and train data.
  #/content/a/*/*/*/
  #../data/*/
  input_train: '/content/a/*/*/*/' # supports glob
  input_test: '../data/*/'  # supports glob
  # For a one-shot run with all data in one directory.
  # input: '/path/to/chunks/*/draw/'
  train_workers: 64
training:
    #
    #swa: true
    #swa_output: true
    #swa_steps: 100
    #swa_max_n: 10
    #mask_legal_moves: true
    #lookahead_optimizer: true
    #renorm: true
    #renorm_max_r: 1.0
    #renorm_max_d: 0.0
    #diff_focus_min: 0.025
    #diff_focus_slope: 3.0
   # q_ratio: 0.0
    #max_grad_norm: 4.0
    #
    precision: 'half'
    batch_size: 2048                   # training batch
    test_steps: 2000                   # eval test set values after this many steps
    train_avg_report_steps: 250        # training reports its average values after this many steps.
    total_steps: 140000                # terminate after these steps
    warmup_steps: 250                  # if global step is less than this, scale the current LR by ratio of global step to this value
    checkpoint_steps: 750          # optional frequency for checkpointing before finish
    shuffle_size: 250000               # size of the shuffle buffer
    lr_values:                         # list of learning rates
        - 0.01
        - 0.002
        - 0.0005
    lr_boundaries:                     # list of boundaries
        - 100000
        - 130000
    policy_loss_weight: 1.0            # weight of policy loss
    value_loss_weight: 1.0             # weight of value loss
    moves_left_loss_weight: 1.0        # weight of moves-left loss
    path: '/content/drive/MyDrive/chess_model/'    # network storage dir

model:
  filters: 32
  residual_blocks: 4
  se_ratio: 2                          # Squeeze Excite structural network architecture. 2
  #policy: 'attention'                  # attention policy fields: 
  pol_embedding_size: 64               # embedding vector size 64
  pol_encoder_layers: 2                # number of intermediate attention layers in the policy head 1 
  pol_encoder_heads: 8                 # number of attention heads in encoder layers 4
  pol_encoder_d_model: 64              # size of the Q, K, & V vectors in encoder layers -- divisible by encoder_heads 64
  pol_encoder_dff: 192                 # size of the largest dense layer in encoder block feed-forward network 128
  policy_d_model: 96                   # size of the query and key vectors in final attention layer 64
  value: 'wdl'
  moves_left: 'v1'
...
